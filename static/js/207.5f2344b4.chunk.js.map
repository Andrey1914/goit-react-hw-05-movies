{"version":3,"file":"static/js/207.5f2344b4.chunk.js","mappings":"qQAEaA,EAAYC,EAAAA,EAAAA,GAAH,oTAcTC,EAAOD,EAAAA,EAAAA,GAAH,0iBAkBJE,EAAQF,EAAAA,EAAAA,IAAH,sBAELG,EAAYH,EAAAA,EAAAA,GAAH,2GAOTI,EAAoBJ,EAAAA,EAAAA,EAAH,6G,SCvCf,SAASK,EAAT,GAAyB,IAATC,EAAQ,EAARA,KAC7B,OACE,+BACE,SAACP,EAAD,UACGO,EAAKC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MAAb,OACR,UAACT,EAAD,WACGS,GACC,SAACR,EAAD,CACES,IAAG,0CAAqCD,GACxCE,IAAKH,KAGP,gBAAKE,IAAKE,EAAMD,IAAKH,EAAMK,MAAO,IAAKC,OAAQ,OAGjD,SAACZ,EAAD,UAAYM,MAVHD,EADH,OAiBjB,CCnBc,SAASQ,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOb,EAAP,KAAac,EAAb,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAeL,GAASM,MAAK,SAAAC,GAC3B,IAAMC,EAAe,GACrBD,EAAElB,KAAKC,KAAI,YAA0C,IAC7CmB,EAAQ,CACZlB,GAFgD,EAAtCA,GAGVC,KAHgD,EAAlCkB,cAIdjB,MAJgD,EAAnBkB,cAM/B,OAAOH,EAAaI,KAAKH,EAC1B,IACDN,EAAQK,EACT,GACF,GAAE,CAACR,IAEGX,GAAQA,EAAKwB,OAAS,GAC3B,SAACzB,EAAD,CAAMC,KAAMA,KAEZ,SAACF,EAAD,iDAEH,C,2MC5BK2B,EAAW,+BACXC,EAAU,mCAET,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAmCC,GAAnC,8EACCC,EADD,UACUJ,EADV,iCAC2CC,EAD3C,kBAC4DE,EAD5D,oBAEQE,IAAAA,IAAA,UAAaD,IAAOZ,MAAK,SAAAc,GAAG,OAAIA,EAAIC,IAAR,IAFpC,0GAKA,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,2FACCC,EADD,UACkBT,EADlB,uCACyDC,EADzD,SACyE,GADzE,SAEQI,IAAAA,IAAA,UAAaI,IAAejB,MAAK,SAAAc,GAAG,OAAIA,EAAIC,IAAR,IAF5C,0GAKA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAiCxB,GAAjC,8EACCyB,EADD,UACiBX,EADjB,kBACmCd,EADnC,oBACsDe,EADtD,4BAEQI,IAAAA,IAAA,UAAaM,IAAcnB,MAAK,SAAAoB,GAAQ,OAAIA,EAASL,IAAb,IAFhD,0GAKA,SAAehB,EAAtB,+CAAO,OAAP,oBAAO,WAA8BL,GAA9B,8EACC2B,EADD,UACcb,EADd,kBACgCd,EADhC,4BAC2De,GAD3D,SAEQI,IAAAA,IAAA,UAAaQ,IAAWrB,MAAK,SAAAoB,GAAQ,OAAIA,EAASL,IAAb,IAF7C,0GAKA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAAkC5B,GAAlC,8EACC6B,EADD,UACiBf,EADjB,kBACmCd,EADnC,4BAC8De,EAD9D,mCAEQI,IAAAA,IAAA,UAAaU,IAAcvB,MAAK,SAAAoB,GAAQ,OAAIA,EAASL,IAAb,IAFhD,0G","sources":["components/Cast/CastStyled.jsx","components/Cast/Cast.jsx","pages/CastPage.jsx","services/api.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastsList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 50px 80px 90px;\n`;\n\nexport const Item = styled.li`\n  padding: 10px;\n  border-radius: 2px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  &:hover {\n    transform: scale(1.03);\n    cursor: zoom-in;\n  }\n`;\n\nexport const Photo = styled.img``;\n\nexport const ActorName = styled.h3`\n  margin-top: 10px;\n  font-size: 15px;\n  font-weight: 500;\n  color: #000000d1;\n`;\n\nexport const NoInformationText = styled.p`\n  display: flex;\n  justify-content: center;\n  padding: 20px;\n  font-weight: 500;\n`;\n","import propTypes from 'prop-types';\nimport plug from '../../default-pic/noPic.jpg';\nimport { CastsList, Item, Photo, ActorName } from './CastStyled';\n\nexport default function Cast({ cast }) {\n  return (\n    <>\n      <CastsList>\n        {cast.map(({ id, name, photo }) => (\n          <Item key={id}>\n            {photo ? (\n              <Photo\n                src={`https://image.tmdb.org/t/p/w300/${photo}`}\n                alt={name}\n              />\n            ) : (\n              <img src={plug} alt={name} width={300} height={450} />\n            )}\n\n            <ActorName>{name}</ActorName>\n          </Item>\n        ))}\n      </CastsList>\n    </>\n  );\n}\n\nCast.propTypes = {\n  cast: propTypes.arrayOf(\n    propTypes.shape({\n      id: propTypes.number,\n      name: propTypes.string,\n      photo: propTypes.string,\n    })\n  ).isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from 'services/api';\nimport Cast from 'components/Cast/Cast';\nimport { NoInformationText } from 'components/Cast/CastStyled';\n\nexport default function CastPage() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    fetchMovieCast(movieId).then(r => {\n      const mappedActors = [];\n      r.cast.map(({ id, original_name, profile_path }) => {\n        const actor = {\n          id: id,\n          name: original_name,\n          photo: profile_path,\n        };\n        return mappedActors.push(actor);\n      });\n      setCast(mappedActors);\n    });\n  }, [movieId]);\n\n  return cast && cast.length > 0 ? (\n    <Cast cast={cast} />\n  ) : (\n    <NoInformationText>Sorry, we have no information here.</NoInformationText>\n  );\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'a9c60f9b21a095b96ccbe9e4f4d7a273';\n\nexport async function fetchMoviesBySearch(query) {\n  const url = `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&page=1`;\n  return await axios.get(`${url}`).then(res => res.data);\n}\n\nexport async function fetchTrendingMovies() {\n  const trendingURL = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=${1}`;\n  return await axios.get(`${trendingURL}`).then(res => res.data);\n}\n\nexport async function fetchMovieDetails(movieId) {\n  const detailsURL = `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`;\n  return await axios.get(`${detailsURL}`).then(response => response.data);\n}\n\nexport async function fetchMovieCast(movieId) {\n  const castURL = `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`;\n  return await axios.get(`${castURL}`).then(response => response.data);\n}\n\nexport async function fetchMoviesReviews(movieId) {\n  const reviewsURL = `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`;\n  return await axios.get(`${reviewsURL}`).then(response => response.data);\n}\n"],"names":["CastsList","styled","Item","Photo","ActorName","NoInformationText","Cast","cast","map","id","name","photo","src","alt","plug","width","height","CastPage","movieId","useParams","useState","setCast","useEffect","fetchMovieCast","then","r","mappedActors","actor","original_name","profile_path","push","length","BASE_URL","API_KEY","fetchMoviesBySearch","query","url","axios","res","data","fetchTrendingMovies","trendingURL","fetchMovieDetails","detailsURL","response","castURL","fetchMoviesReviews","reviewsURL"],"sourceRoot":""}